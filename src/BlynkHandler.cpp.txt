#include "BlynkHandler.h"

// Constructor initializes WiFi credentials and auth token
BlynkHandler::BlynkHandler(const char* ssid, const char* pass, const char* authToken)
    : ssid(ssid), pass(pass), authToken(authToken)
{
}

void BlynkHandler::begin()
{
    Serial.begin(115200);
    Blynk.begin(authToken, ssid, pass);  // Use Blynk instance provided by the library
    setupTimer();  // Setup timer event
}

void BlynkHandler::run()
{
    Blynk.run();    // Use Blynk instance provided by the library
    timer.run();
}

void BlynkHandler::sendUptime()
{
    Blynk.virtualWrite(V2, millis() / 1000);
}

void BlynkHandler::setupTimer()
{
    // Call sendUptime every second
    timer.setInterval(1000L, [this]() { this->sendUptime(); });
}

// Define the BLYNK_WRITE and BLYNK_CONNECTED functions for handling Blynk virtual pin events

BLYNK_WRITE(V0)
{
    int value = param.asInt();
    Blynk.virtualWrite(V1, value);
}

BLYNK_CONNECTED()
{
    Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
    Blynk.setProperty(V3, "onImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
    Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}
